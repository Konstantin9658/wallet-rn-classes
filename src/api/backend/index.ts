/**
 * Generated by orval v7.0.1 🍺
 * Do not edit manually.
 * MercuryHub API
 * MercuryHub ASP.NET Core Web API
 * OpenAPI spec version: v1
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import type {
  ErrorResponse,
  GetApiProfileSearchParams,
  GetApiTransactionsMyParams,
  JwtWithRefreshResponse,
  LoginSsoGoogleCommand,
  MyProfileResponse,
  PostApiAccountSsoGoogleParams,
  ProfileSearchResponse,
  RedeemCoinsCommand,
  RedeemCoinsResponse,
  RefreshTokenCommand,
  TransactionResponsePaginationResponse,
  TransferCoinsCommand,
  UserBalanceUpdatedResponse,
} from "./index.schemas";
import { backendRequest } from "../utils/backendRequest";

/**
 * @summary Authorization with Google account.
 */
export const postApiAccountSsoGoogle = (
  loginSsoGoogleCommand: LoginSsoGoogleCommand,
  params?: PostApiAccountSsoGoogleParams,
) => {
  return backendRequest<JwtWithRefreshResponse>({
    url: `/api/account/sso/google`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: loginSsoGoogleCommand,
    params,
  });
};

export const getPostApiAccountSsoGoogleMutationOptions = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiAccountSsoGoogle>>,
    TError,
    { data: LoginSsoGoogleCommand; params?: PostApiAccountSsoGoogleParams },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiAccountSsoGoogle>>,
  TError,
  { data: LoginSsoGoogleCommand; params?: PostApiAccountSsoGoogleParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiAccountSsoGoogle>>,
    { data: LoginSsoGoogleCommand; params?: PostApiAccountSsoGoogleParams }
  > = props => {
    const { data, params } = props ?? {};

    return postApiAccountSsoGoogle(data, params);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiAccountSsoGoogleMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiAccountSsoGoogle>>
>;
export type PostApiAccountSsoGoogleMutationBody = LoginSsoGoogleCommand;
export type PostApiAccountSsoGoogleMutationError = ErrorResponse;

/**
 * @summary Authorization with Google account.
 */
export const usePostApiAccountSsoGoogle = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiAccountSsoGoogle>>,
    TError,
    { data: LoginSsoGoogleCommand; params?: PostApiAccountSsoGoogleParams },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiAccountSsoGoogle>>,
  TError,
  { data: LoginSsoGoogleCommand; params?: PostApiAccountSsoGoogleParams },
  TContext
> => {
  const mutationOptions = getPostApiAccountSsoGoogleMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * @summary Update access token by refresh token.
 */
export const postApiAccountRefresh = (
  refreshTokenCommand: RefreshTokenCommand,
) => {
  return backendRequest<JwtWithRefreshResponse>({
    url: `/api/account/refresh`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: refreshTokenCommand,
  });
};

export const getPostApiAccountRefreshMutationOptions = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiAccountRefresh>>,
    TError,
    { data: RefreshTokenCommand },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiAccountRefresh>>,
  TError,
  { data: RefreshTokenCommand },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiAccountRefresh>>,
    { data: RefreshTokenCommand }
  > = props => {
    const { data } = props ?? {};

    return postApiAccountRefresh(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiAccountRefreshMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiAccountRefresh>>
>;
export type PostApiAccountRefreshMutationBody = RefreshTokenCommand;
export type PostApiAccountRefreshMutationError = ErrorResponse;

/**
 * @summary Update access token by refresh token.
 */
export const usePostApiAccountRefresh = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiAccountRefresh>>,
    TError,
    { data: RefreshTokenCommand },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiAccountRefresh>>,
  TError,
  { data: RefreshTokenCommand },
  TContext
> => {
  const mutationOptions = getPostApiAccountRefreshMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * @summary Transfer coins from one account to another.
 */
export const postApiCoinsTransfer = (
  transferCoinsCommand: TransferCoinsCommand,
) => {
  return backendRequest<UserBalanceUpdatedResponse>({
    url: `/api/coins/transfer`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: transferCoinsCommand,
  });
};

export const getPostApiCoinsTransferMutationOptions = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiCoinsTransfer>>,
    TError,
    { data: TransferCoinsCommand },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiCoinsTransfer>>,
  TError,
  { data: TransferCoinsCommand },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiCoinsTransfer>>,
    { data: TransferCoinsCommand }
  > = props => {
    const { data } = props ?? {};

    return postApiCoinsTransfer(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiCoinsTransferMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiCoinsTransfer>>
>;
export type PostApiCoinsTransferMutationBody = TransferCoinsCommand;
export type PostApiCoinsTransferMutationError = ErrorResponse;

/**
 * @summary Transfer coins from one account to another.
 */
export const usePostApiCoinsTransfer = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiCoinsTransfer>>,
    TError,
    { data: TransferCoinsCommand },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiCoinsTransfer>>,
  TError,
  { data: TransferCoinsCommand },
  TContext
> => {
  const mutationOptions = getPostApiCoinsTransferMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * @summary Redeem promo code.
 */
export const postApiCoinsRedeem = async (
  redeemCoinsCommand: RedeemCoinsCommand,
) => {
  const { count } = await backendRequest<RedeemCoinsResponse>({
    url: `/api/coins/redeem`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: redeemCoinsCommand,
  });
  return { count };
};

export const getPostApiCoinsRedeemMutationOptions = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiCoinsRedeem>>,
    TError,
    { data: RedeemCoinsCommand },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiCoinsRedeem>>,
  TError,
  { data: RedeemCoinsCommand },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiCoinsRedeem>>,
    { data: RedeemCoinsCommand }
  > = props => {
    const { data } = props ?? {};

    return postApiCoinsRedeem(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiCoinsRedeemMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiCoinsRedeem>>
>;
export type PostApiCoinsRedeemMutationBody = RedeemCoinsCommand;
export type PostApiCoinsRedeemMutationError = ErrorResponse;

/**
 * @summary Redeem promo code.
 */
export const usePostApiCoinsRedeem = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiCoinsRedeem>>,
    TError,
    { data: RedeemCoinsCommand },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiCoinsRedeem>>,
  TError,
  { data: RedeemCoinsCommand },
  TContext
> => {
  const mutationOptions = getPostApiCoinsRedeemMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * @summary Return profile for the current user.
 */
export const getApiProfileMe = (signal?: AbortSignal) => {
  return backendRequest<MyProfileResponse | void>({
    url: `/api/profile/me`,
    method: "GET",
    signal,
  });
};

export const getGetApiProfileMeQueryKey = () => {
  return [`/api/profile/me`] as const;
};

export const getGetApiProfileMeQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiProfileMe>>,
  TError = ErrorResponse,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiProfileMe>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiProfileMeQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiProfileMe>>> = ({
    signal,
  }) => getApiProfileMe(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiProfileMe>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiProfileMeQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiProfileMe>>
>;
export type GetApiProfileMeQueryError = ErrorResponse;

export function useGetApiProfileMe<
  TData = Awaited<ReturnType<typeof getApiProfileMe>>,
  TError = ErrorResponse,
>(options: {
  query: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiProfileMe>>, TError, TData>
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiProfileMe>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiProfileMe<
  TData = Awaited<ReturnType<typeof getApiProfileMe>>,
  TError = ErrorResponse,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiProfileMe>>, TError, TData>
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiProfileMe>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiProfileMe<
  TData = Awaited<ReturnType<typeof getApiProfileMe>>,
  TError = ErrorResponse,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiProfileMe>>, TError, TData>
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Return profile for the current user.
 */

export function useGetApiProfileMe<
  TData = Awaited<ReturnType<typeof getApiProfileMe>>,
  TError = ErrorResponse,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiProfileMe>>, TError, TData>
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiProfileMeQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Search users by email or first name and last name.
 */
export const getApiProfileSearch = (
  params?: GetApiProfileSearchParams,
  signal?: AbortSignal,
) => {
  return backendRequest<ProfileSearchResponse[]>({
    url: `/api/profile/search`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetApiProfileSearchQueryKey = (
  params?: GetApiProfileSearchParams,
) => {
  return [`/api/profile/search`, ...(params ? [params] : [])] as const;
};

export const getGetApiProfileSearchQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiProfileSearch>>,
  TError = ErrorResponse,
>(
  params?: GetApiProfileSearchParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiProfileSearch>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiProfileSearchQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiProfileSearch>>
  > = ({ signal }) => getApiProfileSearch(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiProfileSearch>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiProfileSearchQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiProfileSearch>>
>;
export type GetApiProfileSearchQueryError = ErrorResponse;

export function useGetApiProfileSearch<
  TData = Awaited<ReturnType<typeof getApiProfileSearch>>,
  TError = ErrorResponse,
>(
  params: undefined | GetApiProfileSearchParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiProfileSearch>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiProfileSearch>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiProfileSearch<
  TData = Awaited<ReturnType<typeof getApiProfileSearch>>,
  TError = ErrorResponse,
>(
  params?: GetApiProfileSearchParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiProfileSearch>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiProfileSearch>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiProfileSearch<
  TData = Awaited<ReturnType<typeof getApiProfileSearch>>,
  TError = ErrorResponse,
>(
  params?: GetApiProfileSearchParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiProfileSearch>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Search users by email or first name and last name.
 */

export function useGetApiProfileSearch<
  TData = Awaited<ReturnType<typeof getApiProfileSearch>>,
  TError = ErrorResponse,
>(
  params?: GetApiProfileSearchParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiProfileSearch>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiProfileSearchQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Transaction type:
Debit = 1,
Credit = 2,
Transfer = 3
 * @summary Returns list of transactions for the current user.
 */
export const getApiTransactionsMy = (
  params?: GetApiTransactionsMyParams,
  signal?: AbortSignal,
) => {
  return backendRequest<TransactionResponsePaginationResponse>({
    url: `/api/transactions/my`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetApiTransactionsMyQueryKey = (
  params?: GetApiTransactionsMyParams,
) => {
  return [`/api/transactions/my`, ...(params ? [params] : [])] as const;
};

export const getGetApiTransactionsMyQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiTransactionsMy>>,
  TError = ErrorResponse,
>(
  params?: GetApiTransactionsMyParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiTransactionsMy>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiTransactionsMyQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiTransactionsMy>>
  > = ({ signal }) => getApiTransactionsMy(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiTransactionsMy>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiTransactionsMyQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiTransactionsMy>>
>;
export type GetApiTransactionsMyQueryError = ErrorResponse;

export function useGetApiTransactionsMy<
  TData = Awaited<ReturnType<typeof getApiTransactionsMy>>,
  TError = ErrorResponse,
>(
  params: undefined | GetApiTransactionsMyParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiTransactionsMy>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiTransactionsMy>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiTransactionsMy<
  TData = Awaited<ReturnType<typeof getApiTransactionsMy>>,
  TError = ErrorResponse,
>(
  params?: GetApiTransactionsMyParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiTransactionsMy>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiTransactionsMy>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiTransactionsMy<
  TData = Awaited<ReturnType<typeof getApiTransactionsMy>>,
  TError = ErrorResponse,
>(
  params?: GetApiTransactionsMyParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiTransactionsMy>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Returns list of transactions for the current user.
 */

export function useGetApiTransactionsMy<
  TData = Awaited<ReturnType<typeof getApiTransactionsMy>>,
  TError = ErrorResponse,
>(
  params?: GetApiTransactionsMyParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiTransactionsMy>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiTransactionsMyQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}
