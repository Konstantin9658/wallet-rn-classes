/**
 * Generated by orval v7.0.1 🍺
 * Do not edit manually.
 * MercuryHub API
 * MercuryHub ASP.NET Core Web API
 * OpenAPI spec version: v1
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';
import type {
  ClientResponse,
  ClientResponsePaginationResponse,
  CreatePermissionCommand,
  CreateServiceCommand,
  CreditCoinsToUserCommand,
  DebitCoinsToUserCommand,
  DeleteServicesCommand,
  EditClientCommand,
  EmployeeInfoWithBalanceResponse,
  EmployeeInfoWithBalanceResponsePaginationResponse,
  ErrorResponse,
  GetApiAccountVerificationKeyParams,
  GetApiClientsParams,
  GetApiEmployeeListParams,
  GetApiPermissionsUserteamsParams,
  GetApiProfileAssignmentParams,
  GetApiProfileEmailAvatarParams,
  GetApiProfileEmailAvatarUrlParams,
  GetApiProfileIdAvatarParams,
  GetApiProfileIdAvatarUrlParams,
  GetApiProfileListParams,
  GetApiProfileParams,
  GetApiProfileSearchParams,
  GetApiTransactionsMyParams,
  GetApiTransactionsParams,
  GetApiVacanciesHotParams,
  GetApiVacanciesParams,
  GetUsersMostRecentAssignmentsCommand,
  JwtResponse,
  JwtWithRefreshResponse,
  LoginClientCommand,
  LoginSsoGoogleCommand,
  MyProfileResponse,
  PatchAccessTeamPermissionsCommand,
  PatchAccessUserPermissionsCommand,
  PatchTeamPermissionsCommand,
  PatchUserPermissionsCommand,
  PermissionResponse,
  PickUpPromoCodeCommand,
  PickUpPromoCodeResponse,
  PostApiAccountSsoGoogleParams,
  ProfileAvatarResponse,
  ProfileResponse,
  ProfileSearchResponse,
  ProfileSearchResponsePaginationResponse,
  ProjectResponse,
  RedeemCoinsCommand,
  RedeemCoinsResponse,
  RefreshTokenCommand,
  RegisterClientCommand,
  ServiceResponse,
  SetTeamPermissionsCommand,
  SetUserPermissionsCommand,
  TeamPermissionsResponse,
  TeamResponse,
  TeamServicesResponse,
  TransactionResponsePaginationResponse,
  TransferCoinsCommand,
  UserAssignmentResponse,
  UserAssignmentResponsePaginationResponse,
  UserBalanceUpdatedResponse,
  UserPermissionsResponse,
  VacancyItemResponse,
  VacancyResponse,
} from './index.schemas';
import { backendRequest } from '../utils/backendRequest';

/**
 * @summary Authorization with Google account.
 */
export const postApiAccountSsoGoogle = (
  loginSsoGoogleCommand: LoginSsoGoogleCommand,
  params?: PostApiAccountSsoGoogleParams,
) => {
  return backendRequest<JwtWithRefreshResponse>({
    url: '/api/account/sso/google',
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: loginSsoGoogleCommand,
    params,
  });
};

export const getPostApiAccountSsoGoogleMutationOptions = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiAccountSsoGoogle>>,
    TError,
    { data: LoginSsoGoogleCommand; params?: PostApiAccountSsoGoogleParams },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiAccountSsoGoogle>>,
  TError,
  { data: LoginSsoGoogleCommand; params?: PostApiAccountSsoGoogleParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiAccountSsoGoogle>>,
    { data: LoginSsoGoogleCommand; params?: PostApiAccountSsoGoogleParams }
  > = props => {
    const { data, params } = props ?? {};

    return postApiAccountSsoGoogle(data, params);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiAccountSsoGoogleMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiAccountSsoGoogle>>
>;
export type PostApiAccountSsoGoogleMutationBody = LoginSsoGoogleCommand;
export type PostApiAccountSsoGoogleMutationError = ErrorResponse;

/**
 * @summary Authorization with Google account.
 */
export const usePostApiAccountSsoGoogle = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiAccountSsoGoogle>>,
    TError,
    { data: LoginSsoGoogleCommand; params?: PostApiAccountSsoGoogleParams },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiAccountSsoGoogle>>,
  TError,
  { data: LoginSsoGoogleCommand; params?: PostApiAccountSsoGoogleParams },
  TContext
> => {
  const mutationOptions = getPostApiAccountSsoGoogleMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * @summary Update access token by refresh token.
 */
export const postApiAccountRefresh = (
  refreshTokenCommand: RefreshTokenCommand,
) => {
  return backendRequest<JwtWithRefreshResponse>({
    url: '/api/account/refresh',
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: refreshTokenCommand,
  });
};

export const getPostApiAccountRefreshMutationOptions = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiAccountRefresh>>,
    TError,
    { data: RefreshTokenCommand },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiAccountRefresh>>,
  TError,
  { data: RefreshTokenCommand },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiAccountRefresh>>,
    { data: RefreshTokenCommand }
  > = props => {
    const { data } = props ?? {};

    return postApiAccountRefresh(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiAccountRefreshMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiAccountRefresh>>
>;
export type PostApiAccountRefreshMutationBody = RefreshTokenCommand;
export type PostApiAccountRefreshMutationError = ErrorResponse;

/**
 * @summary Update access token by refresh token.
 */
export const usePostApiAccountRefresh = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiAccountRefresh>>,
    TError,
    { data: RefreshTokenCommand },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiAccountRefresh>>,
  TError,
  { data: RefreshTokenCommand },
  TContext
> => {
  const mutationOptions = getPostApiAccountRefreshMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * @summary Return a public key to verify signature for access token.
 */
export const getApiAccountVerificationKey = (
  params?: GetApiAccountVerificationKeyParams,
  signal?: AbortSignal,
) => {
  return backendRequest<string>({
    url: '/api/account/verificationKey',
    method: 'GET',
    params,
    signal,
  });
};

export const getGetApiAccountVerificationKeyQueryKey = (
  params?: GetApiAccountVerificationKeyParams,
) => {
  return ['/api/account/verificationKey', ...(params ? [params] : [])] as const;
};

export const getGetApiAccountVerificationKeyQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiAccountVerificationKey>>,
  TError = unknown,
>(
  params?: GetApiAccountVerificationKeyParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiAccountVerificationKey>>,
      TError,
      TData
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiAccountVerificationKeyQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiAccountVerificationKey>>
  > = ({ signal }) => getApiAccountVerificationKey(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiAccountVerificationKey>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiAccountVerificationKeyQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiAccountVerificationKey>>
>;
export type GetApiAccountVerificationKeyQueryError = unknown;

/**
 * @summary Return a public key to verify signature for access token.
 */

export function useGetApiAccountVerificationKey<
  TData = Awaited<ReturnType<typeof getApiAccountVerificationKey>>,
  TError = unknown,
>(
  params?: GetApiAccountVerificationKeyParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiAccountVerificationKey>>,
      TError,
      TData
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiAccountVerificationKeyQueryOptions(
    params,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Client Login.
 */
export const postApiAccountClientsLogin = (
  loginClientCommand: LoginClientCommand,
) => {
  return backendRequest<JwtResponse>({
    url: '/api/account/clients/login',
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: loginClientCommand,
  });
};

export const getPostApiAccountClientsLoginMutationOptions = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiAccountClientsLogin>>,
    TError,
    { data: LoginClientCommand },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiAccountClientsLogin>>,
  TError,
  { data: LoginClientCommand },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiAccountClientsLogin>>,
    { data: LoginClientCommand }
  > = props => {
    const { data } = props ?? {};

    return postApiAccountClientsLogin(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiAccountClientsLoginMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiAccountClientsLogin>>
>;
export type PostApiAccountClientsLoginMutationBody = LoginClientCommand;
export type PostApiAccountClientsLoginMutationError = ErrorResponse;

/**
 * @summary Client Login.
 */
export const usePostApiAccountClientsLogin = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiAccountClientsLogin>>,
    TError,
    { data: LoginClientCommand },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiAccountClientsLogin>>,
  TError,
  { data: LoginClientCommand },
  TContext
> => {
  const mutationOptions = getPostApiAccountClientsLoginMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * @summary Guest Login.
 */
export const postApiAccountGuest = () => {
  return backendRequest<JwtWithRefreshResponse>({
    url: '/api/account/guest',
    method: 'POST',
  });
};

export const getPostApiAccountGuestMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiAccountGuest>>,
    TError,
    void,
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiAccountGuest>>,
  TError,
  void,
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiAccountGuest>>,
    void
  > = () => {
    return postApiAccountGuest();
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiAccountGuestMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiAccountGuest>>
>;

export type PostApiAccountGuestMutationError = unknown;

/**
 * @summary Guest Login.
 */
export const usePostApiAccountGuest = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiAccountGuest>>,
    TError,
    void,
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiAccountGuest>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions = getPostApiAccountGuestMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * @summary Registers new client.
 */
export const postApiClients = (
  registerClientCommand: RegisterClientCommand,
) => {
  return backendRequest<ClientResponse>({
    url: '/api/clients',
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: registerClientCommand,
  });
};

export const getPostApiClientsMutationOptions = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiClients>>,
    TError,
    { data: RegisterClientCommand },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiClients>>,
  TError,
  { data: RegisterClientCommand },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiClients>>,
    { data: RegisterClientCommand }
  > = props => {
    const { data } = props ?? {};

    return postApiClients(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiClientsMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiClients>>
>;
export type PostApiClientsMutationBody = RegisterClientCommand;
export type PostApiClientsMutationError = ErrorResponse;

/**
 * @summary Registers new client.
 */
export const usePostApiClients = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiClients>>,
    TError,
    { data: RegisterClientCommand },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiClients>>,
  TError,
  { data: RegisterClientCommand },
  TContext
> => {
  const mutationOptions = getPostApiClientsMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * @summary Returns paginated list of clients.
 */
export const getApiClients = (
  params?: GetApiClientsParams,
  signal?: AbortSignal,
) => {
  return backendRequest<ClientResponsePaginationResponse>({
    url: '/api/clients',
    method: 'GET',
    params,
    signal,
  });
};

export const getGetApiClientsQueryKey = (params?: GetApiClientsParams) => {
  return ['/api/clients', ...(params ? [params] : [])] as const;
};

export const getGetApiClientsQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiClients>>,
  TError = ErrorResponse,
>(
  params?: GetApiClientsParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiClients>>,
      TError,
      TData
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiClientsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiClients>>> = ({
    signal,
  }) => getApiClients(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiClients>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiClientsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiClients>>
>;
export type GetApiClientsQueryError = ErrorResponse;

/**
 * @summary Returns paginated list of clients.
 */

export function useGetApiClients<
  TData = Awaited<ReturnType<typeof getApiClients>>,
  TError = ErrorResponse,
>(
  params?: GetApiClientsParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiClients>>,
      TError,
      TData
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiClientsQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Resets client secret password.
 */
export const postApiClientsClientIdResetSecret = (clientId: string) => {
  return backendRequest<ClientResponse>({
    url: `/api/clients/${clientId}/reset-secret`,
    method: 'POST',
  });
};

export const getPostApiClientsClientIdResetSecretMutationOptions = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiClientsClientIdResetSecret>>,
    TError,
    { clientId: string },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiClientsClientIdResetSecret>>,
  TError,
  { clientId: string },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiClientsClientIdResetSecret>>,
    { clientId: string }
  > = props => {
    const { clientId } = props ?? {};

    return postApiClientsClientIdResetSecret(clientId);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiClientsClientIdResetSecretMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiClientsClientIdResetSecret>>
>;

export type PostApiClientsClientIdResetSecretMutationError = ErrorResponse;

/**
 * @summary Resets client secret password.
 */
export const usePostApiClientsClientIdResetSecret = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiClientsClientIdResetSecret>>,
    TError,
    { clientId: string },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiClientsClientIdResetSecret>>,
  TError,
  { clientId: string },
  TContext
> => {
  const mutationOptions =
    getPostApiClientsClientIdResetSecretMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * @summary Deletes client.
 */
export const deleteApiClientsClientId = (clientId: string) => {
  return backendRequest<void>({
    url: `/api/clients/${clientId}`,
    method: 'DELETE',
  });
};

export const getDeleteApiClientsClientIdMutationOptions = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiClientsClientId>>,
    TError,
    { clientId: string },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiClientsClientId>>,
  TError,
  { clientId: string },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiClientsClientId>>,
    { clientId: string }
  > = props => {
    const { clientId } = props ?? {};

    return deleteApiClientsClientId(clientId);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiClientsClientIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiClientsClientId>>
>;

export type DeleteApiClientsClientIdMutationError = ErrorResponse;

/**
 * @summary Deletes client.
 */
export const useDeleteApiClientsClientId = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiClientsClientId>>,
    TError,
    { clientId: string },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteApiClientsClientId>>,
  TError,
  { clientId: string },
  TContext
> => {
  const mutationOptions = getDeleteApiClientsClientIdMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * @summary Updates client name.
 */
export const putApiClientsClientId = (
  clientId: string,
  editClientCommand: EditClientCommand,
) => {
  return backendRequest<ClientResponse>({
    url: `/api/clients/${clientId}`,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    data: editClientCommand,
  });
};

export const getPutApiClientsClientIdMutationOptions = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiClientsClientId>>,
    TError,
    { clientId: string; data: EditClientCommand },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiClientsClientId>>,
  TError,
  { clientId: string; data: EditClientCommand },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiClientsClientId>>,
    { clientId: string; data: EditClientCommand }
  > = props => {
    const { clientId, data } = props ?? {};

    return putApiClientsClientId(clientId, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiClientsClientIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiClientsClientId>>
>;
export type PutApiClientsClientIdMutationBody = EditClientCommand;
export type PutApiClientsClientIdMutationError = ErrorResponse;

/**
 * @summary Updates client name.
 */
export const usePutApiClientsClientId = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiClientsClientId>>,
    TError,
    { clientId: string; data: EditClientCommand },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof putApiClientsClientId>>,
  TError,
  { clientId: string; data: EditClientCommand },
  TContext
> => {
  const mutationOptions = getPutApiClientsClientIdMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * @summary Returns data for the specified client id.
 */
export const getApiClientsClientId = (
  clientId: string,
  signal?: AbortSignal,
) => {
  return backendRequest<ClientResponse>({
    url: `/api/clients/${clientId}`,
    method: 'GET',
    signal,
  });
};

export const getGetApiClientsClientIdQueryKey = (clientId: string) => {
  return [`/api/clients/${clientId}`] as const;
};

export const getGetApiClientsClientIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiClientsClientId>>,
  TError = ErrorResponse,
>(
  clientId: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiClientsClientId>>,
      TError,
      TData
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiClientsClientIdQueryKey(clientId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiClientsClientId>>
  > = ({ signal }) => getApiClientsClientId(clientId, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!clientId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiClientsClientId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiClientsClientIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiClientsClientId>>
>;
export type GetApiClientsClientIdQueryError = ErrorResponse;

/**
 * @summary Returns data for the specified client id.
 */

export function useGetApiClientsClientId<
  TData = Awaited<ReturnType<typeof getApiClientsClientId>>,
  TError = ErrorResponse,
>(
  clientId: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiClientsClientId>>,
      TError,
      TData
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiClientsClientIdQueryOptions(clientId, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Add coins to the specified user's balance.
 */
export const postApiCoinsDebit = (
  debitCoinsToUserCommand: DebitCoinsToUserCommand,
) => {
  return backendRequest<UserBalanceUpdatedResponse>({
    url: '/api/coins/debit',
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: debitCoinsToUserCommand,
  });
};

export const getPostApiCoinsDebitMutationOptions = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiCoinsDebit>>,
    TError,
    { data: DebitCoinsToUserCommand },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiCoinsDebit>>,
  TError,
  { data: DebitCoinsToUserCommand },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiCoinsDebit>>,
    { data: DebitCoinsToUserCommand }
  > = props => {
    const { data } = props ?? {};

    return postApiCoinsDebit(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiCoinsDebitMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiCoinsDebit>>
>;
export type PostApiCoinsDebitMutationBody = DebitCoinsToUserCommand;
export type PostApiCoinsDebitMutationError = ErrorResponse;

/**
 * @summary Add coins to the specified user's balance.
 */
export const usePostApiCoinsDebit = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiCoinsDebit>>,
    TError,
    { data: DebitCoinsToUserCommand },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiCoinsDebit>>,
  TError,
  { data: DebitCoinsToUserCommand },
  TContext
> => {
  const mutationOptions = getPostApiCoinsDebitMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * @summary Subtract coins from the specified user's balance.
 */
export const postApiCoinsCredit = (
  creditCoinsToUserCommand: CreditCoinsToUserCommand,
) => {
  return backendRequest<UserBalanceUpdatedResponse>({
    url: '/api/coins/credit',
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: creditCoinsToUserCommand,
  });
};

export const getPostApiCoinsCreditMutationOptions = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiCoinsCredit>>,
    TError,
    { data: CreditCoinsToUserCommand },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiCoinsCredit>>,
  TError,
  { data: CreditCoinsToUserCommand },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiCoinsCredit>>,
    { data: CreditCoinsToUserCommand }
  > = props => {
    const { data } = props ?? {};

    return postApiCoinsCredit(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiCoinsCreditMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiCoinsCredit>>
>;
export type PostApiCoinsCreditMutationBody = CreditCoinsToUserCommand;
export type PostApiCoinsCreditMutationError = ErrorResponse;

/**
 * @summary Subtract coins from the specified user's balance.
 */
export const usePostApiCoinsCredit = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiCoinsCredit>>,
    TError,
    { data: CreditCoinsToUserCommand },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiCoinsCredit>>,
  TError,
  { data: CreditCoinsToUserCommand },
  TContext
> => {
  const mutationOptions = getPostApiCoinsCreditMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * @summary Transfer coins from one account to another.
 */
export const postApiCoinsTransfer = (
  transferCoinsCommand: TransferCoinsCommand,
) => {
  return backendRequest<UserBalanceUpdatedResponse>({
    url: '/api/coins/transfer',
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: transferCoinsCommand,
  });
};

export const getPostApiCoinsTransferMutationOptions = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiCoinsTransfer>>,
    TError,
    { data: TransferCoinsCommand },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiCoinsTransfer>>,
  TError,
  { data: TransferCoinsCommand },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiCoinsTransfer>>,
    { data: TransferCoinsCommand }
  > = props => {
    const { data } = props ?? {};

    return postApiCoinsTransfer(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiCoinsTransferMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiCoinsTransfer>>
>;
export type PostApiCoinsTransferMutationBody = TransferCoinsCommand;
export type PostApiCoinsTransferMutationError = ErrorResponse;

/**
 * @summary Transfer coins from one account to another.
 */
export const usePostApiCoinsTransfer = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiCoinsTransfer>>,
    TError,
    { data: TransferCoinsCommand },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiCoinsTransfer>>,
  TError,
  { data: TransferCoinsCommand },
  TContext
> => {
  const mutationOptions = getPostApiCoinsTransferMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * @summary Redeem promo code.
 */
export const postApiCoinsRedeem = (redeemCoinsCommand: RedeemCoinsCommand) => {
  return backendRequest<RedeemCoinsResponse>({
    url: '/api/coins/redeem',
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: redeemCoinsCommand,
  });
};

export const getPostApiCoinsRedeemMutationOptions = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiCoinsRedeem>>,
    TError,
    { data: RedeemCoinsCommand },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiCoinsRedeem>>,
  TError,
  { data: RedeemCoinsCommand },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiCoinsRedeem>>,
    { data: RedeemCoinsCommand }
  > = props => {
    const { data } = props ?? {};

    return postApiCoinsRedeem(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiCoinsRedeemMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiCoinsRedeem>>
>;
export type PostApiCoinsRedeemMutationBody = RedeemCoinsCommand;
export type PostApiCoinsRedeemMutationError = ErrorResponse;

/**
 * @summary Redeem promo code.
 */
export const usePostApiCoinsRedeem = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiCoinsRedeem>>,
    TError,
    { data: RedeemCoinsCommand },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiCoinsRedeem>>,
  TError,
  { data: RedeemCoinsCommand },
  TContext
> => {
  const mutationOptions = getPostApiCoinsRedeemMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * @summary Return image by storage key.
 */
export const getApiImageKey = (key: string, signal?: AbortSignal) => {
  return backendRequest<Blob>({
    url: `/api/image/${key}`,
    method: 'GET',
    responseType: 'blob',
    signal,
  });
};

export const getGetApiImageKeyQueryKey = (key: string) => {
  return [`/api/image/${key}`] as const;
};

export const getGetApiImageKeyQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiImageKey>>,
  TError = ErrorResponse,
>(
  key: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiImageKey>>,
      TError,
      TData
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiImageKeyQueryKey(key);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiImageKey>>> = ({
    signal,
  }) => getApiImageKey(key, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!key,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiImageKey>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiImageKeyQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiImageKey>>
>;
export type GetApiImageKeyQueryError = ErrorResponse;

/**
 * @summary Return image by storage key.
 */

export function useGetApiImageKey<
  TData = Awaited<ReturnType<typeof getApiImageKey>>,
  TError = ErrorResponse,
>(
  key: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiImageKey>>,
      TError,
      TData
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiImageKeyQueryOptions(key, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Return paginated list of employees.
 */
export const getApiEmployeeList = (
  params?: GetApiEmployeeListParams,
  signal?: AbortSignal,
) => {
  return backendRequest<EmployeeInfoWithBalanceResponsePaginationResponse>({
    url: '/api/employee/list',
    method: 'GET',
    params,
    signal,
  });
};

export const getGetApiEmployeeListQueryKey = (
  params?: GetApiEmployeeListParams,
) => {
  return ['/api/employee/list', ...(params ? [params] : [])] as const;
};

export const getGetApiEmployeeListQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiEmployeeList>>,
  TError = ErrorResponse,
>(
  params?: GetApiEmployeeListParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiEmployeeList>>,
      TError,
      TData
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiEmployeeListQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiEmployeeList>>
  > = ({ signal }) => getApiEmployeeList(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiEmployeeList>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiEmployeeListQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiEmployeeList>>
>;
export type GetApiEmployeeListQueryError = ErrorResponse;

/**
 * @summary Return paginated list of employees.
 */

export function useGetApiEmployeeList<
  TData = Awaited<ReturnType<typeof getApiEmployeeList>>,
  TError = ErrorResponse,
>(
  params?: GetApiEmployeeListParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiEmployeeList>>,
      TError,
      TData
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiEmployeeListQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Search users by assignments.
 */
export const getApiProfileAssignment = (
  params?: GetApiProfileAssignmentParams,
  signal?: AbortSignal,
) => {
  return backendRequest<UserAssignmentResponsePaginationResponse>({
    url: '/api/profile/assignment',
    method: 'GET',
    params,
    signal,
  });
};

export const getGetApiProfileAssignmentQueryKey = (
  params?: GetApiProfileAssignmentParams,
) => {
  return ['/api/profile/assignment', ...(params ? [params] : [])] as const;
};

export const getGetApiProfileAssignmentQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiProfileAssignment>>,
  TError = ErrorResponse,
>(
  params?: GetApiProfileAssignmentParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiProfileAssignment>>,
      TError,
      TData
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiProfileAssignmentQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiProfileAssignment>>
  > = ({ signal }) => getApiProfileAssignment(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiProfileAssignment>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiProfileAssignmentQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiProfileAssignment>>
>;
export type GetApiProfileAssignmentQueryError = ErrorResponse;

/**
 * @summary Search users by assignments.
 */

export function useGetApiProfileAssignment<
  TData = Awaited<ReturnType<typeof getApiProfileAssignment>>,
  TError = ErrorResponse,
>(
  params?: GetApiProfileAssignmentParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiProfileAssignment>>,
      TError,
      TData
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiProfileAssignmentQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Fetches users most recent assignments till date.
 */
export const postApiProfileRecentAssignments = (
  getUsersMostRecentAssignmentsCommand: GetUsersMostRecentAssignmentsCommand,
) => {
  return backendRequest<UserAssignmentResponse[]>({
    url: '/api/profile/recent-assignments',
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: getUsersMostRecentAssignmentsCommand,
  });
};

export const getPostApiProfileRecentAssignmentsMutationOptions = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiProfileRecentAssignments>>,
    TError,
    { data: GetUsersMostRecentAssignmentsCommand },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiProfileRecentAssignments>>,
  TError,
  { data: GetUsersMostRecentAssignmentsCommand },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiProfileRecentAssignments>>,
    { data: GetUsersMostRecentAssignmentsCommand }
  > = props => {
    const { data } = props ?? {};

    return postApiProfileRecentAssignments(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiProfileRecentAssignmentsMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiProfileRecentAssignments>>
>;
export type PostApiProfileRecentAssignmentsMutationBody =
  GetUsersMostRecentAssignmentsCommand;
export type PostApiProfileRecentAssignmentsMutationError = ErrorResponse;

/**
 * @summary Fetches users most recent assignments till date.
 */
export const usePostApiProfileRecentAssignments = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiProfileRecentAssignments>>,
    TError,
    { data: GetUsersMostRecentAssignmentsCommand },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiProfileRecentAssignments>>,
  TError,
  { data: GetUsersMostRecentAssignmentsCommand },
  TContext
> => {
  const mutationOptions =
    getPostApiProfileRecentAssignmentsMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * @summary Create permission for service.
 */
export const postApiPermissions = (
  createPermissionCommand: CreatePermissionCommand,
) => {
  return backendRequest<PermissionResponse[]>({
    url: '/api/permissions',
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: createPermissionCommand,
  });
};

export const getPostApiPermissionsMutationOptions = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiPermissions>>,
    TError,
    { data: CreatePermissionCommand },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiPermissions>>,
  TError,
  { data: CreatePermissionCommand },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiPermissions>>,
    { data: CreatePermissionCommand }
  > = props => {
    const { data } = props ?? {};

    return postApiPermissions(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiPermissionsMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiPermissions>>
>;
export type PostApiPermissionsMutationBody = CreatePermissionCommand;
export type PostApiPermissionsMutationError = ErrorResponse;

/**
 * @summary Create permission for service.
 */
export const usePostApiPermissions = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiPermissions>>,
    TError,
    { data: CreatePermissionCommand },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiPermissions>>,
  TError,
  { data: CreatePermissionCommand },
  TContext
> => {
  const mutationOptions = getPostApiPermissionsMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * @summary Get paginated list of users including teams.
 */
export const getApiPermissionsUserteams = (
  params?: GetApiPermissionsUserteamsParams,
  signal?: AbortSignal,
) => {
  return backendRequest<ProfileSearchResponsePaginationResponse>({
    url: '/api/permissions/userteams',
    method: 'GET',
    params,
    signal,
  });
};

export const getGetApiPermissionsUserteamsQueryKey = (
  params?: GetApiPermissionsUserteamsParams,
) => {
  return ['/api/permissions/userteams', ...(params ? [params] : [])] as const;
};

export const getGetApiPermissionsUserteamsQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiPermissionsUserteams>>,
  TError = ErrorResponse,
>(
  params?: GetApiPermissionsUserteamsParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiPermissionsUserteams>>,
      TError,
      TData
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiPermissionsUserteamsQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiPermissionsUserteams>>
  > = ({ signal }) => getApiPermissionsUserteams(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiPermissionsUserteams>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiPermissionsUserteamsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiPermissionsUserteams>>
>;
export type GetApiPermissionsUserteamsQueryError = ErrorResponse;

/**
 * @summary Get paginated list of users including teams.
 */

export function useGetApiPermissionsUserteams<
  TData = Awaited<ReturnType<typeof getApiPermissionsUserteams>>,
  TError = ErrorResponse,
>(
  params?: GetApiPermissionsUserteamsParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiPermissionsUserteams>>,
      TError,
      TData
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiPermissionsUserteamsQueryOptions(
    params,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get a List of Permissions grouped by service for the specified user.
 */
export const getApiUserUserIdPermissions = (
  userId: string,
  signal?: AbortSignal,
) => {
  return backendRequest<UserPermissionsResponse>({
    url: `/api/user/${userId}/permissions`,
    method: 'GET',
    signal,
  });
};

export const getGetApiUserUserIdPermissionsQueryKey = (userId: string) => {
  return [`/api/user/${userId}/permissions`] as const;
};

export const getGetApiUserUserIdPermissionsQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiUserUserIdPermissions>>,
  TError = ErrorResponse,
>(
  userId: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiUserUserIdPermissions>>,
      TError,
      TData
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiUserUserIdPermissionsQueryKey(userId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiUserUserIdPermissions>>
  > = ({ signal }) => getApiUserUserIdPermissions(userId, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!userId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiUserUserIdPermissions>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiUserUserIdPermissionsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiUserUserIdPermissions>>
>;
export type GetApiUserUserIdPermissionsQueryError = ErrorResponse;

/**
 * @summary Get a List of Permissions grouped by service for the specified user.
 */

export function useGetApiUserUserIdPermissions<
  TData = Awaited<ReturnType<typeof getApiUserUserIdPermissions>>,
  TError = ErrorResponse,
>(
  userId: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiUserUserIdPermissions>>,
      TError,
      TData
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiUserUserIdPermissionsQueryOptions(
    userId,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Set permissions for user.
 */
export const patchApiUserUserIdPermissions = (
  userId: string,
  patchUserPermissionsCommand: PatchUserPermissionsCommand,
) => {
  return backendRequest<UserPermissionsResponse>({
    url: `/api/user/${userId}/permissions`,
    method: 'PATCH',
    headers: { 'Content-Type': 'application/json' },
    data: patchUserPermissionsCommand,
  });
};

export const getPatchApiUserUserIdPermissionsMutationOptions = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchApiUserUserIdPermissions>>,
    TError,
    { userId: string; data: PatchUserPermissionsCommand },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof patchApiUserUserIdPermissions>>,
  TError,
  { userId: string; data: PatchUserPermissionsCommand },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof patchApiUserUserIdPermissions>>,
    { userId: string; data: PatchUserPermissionsCommand }
  > = props => {
    const { userId, data } = props ?? {};

    return patchApiUserUserIdPermissions(userId, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PatchApiUserUserIdPermissionsMutationResult = NonNullable<
  Awaited<ReturnType<typeof patchApiUserUserIdPermissions>>
>;
export type PatchApiUserUserIdPermissionsMutationBody =
  PatchUserPermissionsCommand;
export type PatchApiUserUserIdPermissionsMutationError = ErrorResponse;

/**
 * @summary Set permissions for user.
 */
export const usePatchApiUserUserIdPermissions = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchApiUserUserIdPermissions>>,
    TError,
    { userId: string; data: PatchUserPermissionsCommand },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof patchApiUserUserIdPermissions>>,
  TError,
  { userId: string; data: PatchUserPermissionsCommand },
  TContext
> => {
  const mutationOptions =
    getPatchApiUserUserIdPermissionsMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * @deprecated
 * @summary Set permissions for user.
 */
export const patchApiV0UserUserIdPermissions = (
  userId: string,
  setUserPermissionsCommand: SetUserPermissionsCommand,
) => {
  return backendRequest<UserPermissionsResponse>({
    url: `/api/v0/user/${userId}/permissions`,
    method: 'PATCH',
    headers: { 'Content-Type': 'application/json' },
    data: setUserPermissionsCommand,
  });
};

export const getPatchApiV0UserUserIdPermissionsMutationOptions = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchApiV0UserUserIdPermissions>>,
    TError,
    { userId: string; data: SetUserPermissionsCommand },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof patchApiV0UserUserIdPermissions>>,
  TError,
  { userId: string; data: SetUserPermissionsCommand },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof patchApiV0UserUserIdPermissions>>,
    { userId: string; data: SetUserPermissionsCommand }
  > = props => {
    const { userId, data } = props ?? {};

    return patchApiV0UserUserIdPermissions(userId, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PatchApiV0UserUserIdPermissionsMutationResult = NonNullable<
  Awaited<ReturnType<typeof patchApiV0UserUserIdPermissions>>
>;
export type PatchApiV0UserUserIdPermissionsMutationBody =
  SetUserPermissionsCommand;
export type PatchApiV0UserUserIdPermissionsMutationError = ErrorResponse;

/**
 * @deprecated
 * @summary Set permissions for user.
 */
export const usePatchApiV0UserUserIdPermissions = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchApiV0UserUserIdPermissions>>,
    TError,
    { userId: string; data: SetUserPermissionsCommand },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof patchApiV0UserUserIdPermissions>>,
  TError,
  { userId: string; data: SetUserPermissionsCommand },
  TContext
> => {
  const mutationOptions =
    getPatchApiV0UserUserIdPermissionsMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * @summary Get list of teams with available services.
 */
export const getApiTeamsWithAvailableServices = (signal?: AbortSignal) => {
  return backendRequest<TeamServicesResponse[]>({
    url: '/api/teams/with-available-services',
    method: 'GET',
    signal,
  });
};

export const getGetApiTeamsWithAvailableServicesQueryKey = () => {
  return ['/api/teams/with-available-services'] as const;
};

export const getGetApiTeamsWithAvailableServicesQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiTeamsWithAvailableServices>>,
  TError = ErrorResponse,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getApiTeamsWithAvailableServices>>,
    TError,
    TData
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiTeamsWithAvailableServicesQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiTeamsWithAvailableServices>>
  > = ({ signal }) => getApiTeamsWithAvailableServices(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiTeamsWithAvailableServices>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiTeamsWithAvailableServicesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiTeamsWithAvailableServices>>
>;
export type GetApiTeamsWithAvailableServicesQueryError = ErrorResponse;

/**
 * @summary Get list of teams with available services.
 */

export function useGetApiTeamsWithAvailableServices<
  TData = Awaited<ReturnType<typeof getApiTeamsWithAvailableServices>>,
  TError = ErrorResponse,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getApiTeamsWithAvailableServices>>,
    TError,
    TData
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiTeamsWithAvailableServicesQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get permissions for spatial team.
 */
export const getApiTeamTeamIdPermissions = (
  teamId: number,
  signal?: AbortSignal,
) => {
  return backendRequest<TeamPermissionsResponse[]>({
    url: `/api/team/${teamId}/permissions`,
    method: 'GET',
    signal,
  });
};

export const getGetApiTeamTeamIdPermissionsQueryKey = (teamId: number) => {
  return [`/api/team/${teamId}/permissions`] as const;
};

export const getGetApiTeamTeamIdPermissionsQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiTeamTeamIdPermissions>>,
  TError = ErrorResponse,
>(
  teamId: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiTeamTeamIdPermissions>>,
      TError,
      TData
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiTeamTeamIdPermissionsQueryKey(teamId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiTeamTeamIdPermissions>>
  > = ({ signal }) => getApiTeamTeamIdPermissions(teamId, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!teamId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiTeamTeamIdPermissions>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiTeamTeamIdPermissionsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiTeamTeamIdPermissions>>
>;
export type GetApiTeamTeamIdPermissionsQueryError = ErrorResponse;

/**
 * @summary Get permissions for spatial team.
 */

export function useGetApiTeamTeamIdPermissions<
  TData = Awaited<ReturnType<typeof getApiTeamTeamIdPermissions>>,
  TError = ErrorResponse,
>(
  teamId: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiTeamTeamIdPermissions>>,
      TError,
      TData
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiTeamTeamIdPermissionsQueryOptions(
    teamId,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Patch permissions for team.
 */
export const patchApiTeamTeamIdPermissions = (
  teamId: number,
  patchTeamPermissionsCommand: PatchTeamPermissionsCommand,
) => {
  return backendRequest<TeamPermissionsResponse>({
    url: `/api/team/${teamId}/permissions`,
    method: 'PATCH',
    headers: { 'Content-Type': 'application/json' },
    data: patchTeamPermissionsCommand,
  });
};

export const getPatchApiTeamTeamIdPermissionsMutationOptions = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchApiTeamTeamIdPermissions>>,
    TError,
    { teamId: number; data: PatchTeamPermissionsCommand },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof patchApiTeamTeamIdPermissions>>,
  TError,
  { teamId: number; data: PatchTeamPermissionsCommand },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof patchApiTeamTeamIdPermissions>>,
    { teamId: number; data: PatchTeamPermissionsCommand }
  > = props => {
    const { teamId, data } = props ?? {};

    return patchApiTeamTeamIdPermissions(teamId, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PatchApiTeamTeamIdPermissionsMutationResult = NonNullable<
  Awaited<ReturnType<typeof patchApiTeamTeamIdPermissions>>
>;
export type PatchApiTeamTeamIdPermissionsMutationBody =
  PatchTeamPermissionsCommand;
export type PatchApiTeamTeamIdPermissionsMutationError = ErrorResponse;

/**
 * @summary Patch permissions for team.
 */
export const usePatchApiTeamTeamIdPermissions = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchApiTeamTeamIdPermissions>>,
    TError,
    { teamId: number; data: PatchTeamPermissionsCommand },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof patchApiTeamTeamIdPermissions>>,
  TError,
  { teamId: number; data: PatchTeamPermissionsCommand },
  TContext
> => {
  const mutationOptions =
    getPatchApiTeamTeamIdPermissionsMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * @deprecated
 * @summary Set available permissions for team.
 */
export const patchApiV0TeamTeamIdPermissions = (
  teamId: number,
  setTeamPermissionsCommand: SetTeamPermissionsCommand,
) => {
  return backendRequest<TeamPermissionsResponse>({
    url: `/api/v0/team/${teamId}/permissions`,
    method: 'PATCH',
    headers: { 'Content-Type': 'application/json' },
    data: setTeamPermissionsCommand,
  });
};

export const getPatchApiV0TeamTeamIdPermissionsMutationOptions = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchApiV0TeamTeamIdPermissions>>,
    TError,
    { teamId: number; data: SetTeamPermissionsCommand },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof patchApiV0TeamTeamIdPermissions>>,
  TError,
  { teamId: number; data: SetTeamPermissionsCommand },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof patchApiV0TeamTeamIdPermissions>>,
    { teamId: number; data: SetTeamPermissionsCommand }
  > = props => {
    const { teamId, data } = props ?? {};

    return patchApiV0TeamTeamIdPermissions(teamId, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PatchApiV0TeamTeamIdPermissionsMutationResult = NonNullable<
  Awaited<ReturnType<typeof patchApiV0TeamTeamIdPermissions>>
>;
export type PatchApiV0TeamTeamIdPermissionsMutationBody =
  SetTeamPermissionsCommand;
export type PatchApiV0TeamTeamIdPermissionsMutationError = ErrorResponse;

/**
 * @deprecated
 * @summary Set available permissions for team.
 */
export const usePatchApiV0TeamTeamIdPermissions = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchApiV0TeamTeamIdPermissions>>,
    TError,
    { teamId: number; data: SetTeamPermissionsCommand },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof patchApiV0TeamTeamIdPermissions>>,
  TError,
  { teamId: number; data: SetTeamPermissionsCommand },
  TContext
> => {
  const mutationOptions =
    getPatchApiV0TeamTeamIdPermissionsMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * @summary Patch access user permissions for user and specified services.
 */
export const patchApiUserUserIdServicesAccessPermission = (
  userId: string,
  patchAccessUserPermissionsCommand: PatchAccessUserPermissionsCommand,
) => {
  return backendRequest<UserPermissionsResponse>({
    url: `/api/user/${userId}/services/access-permission`,
    method: 'PATCH',
    headers: { 'Content-Type': 'application/json' },
    data: patchAccessUserPermissionsCommand,
  });
};

export const getPatchApiUserUserIdServicesAccessPermissionMutationOptions = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchApiUserUserIdServicesAccessPermission>>,
    TError,
    { userId: string; data: PatchAccessUserPermissionsCommand },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof patchApiUserUserIdServicesAccessPermission>>,
  TError,
  { userId: string; data: PatchAccessUserPermissionsCommand },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof patchApiUserUserIdServicesAccessPermission>>,
    { userId: string; data: PatchAccessUserPermissionsCommand }
  > = props => {
    const { userId, data } = props ?? {};

    return patchApiUserUserIdServicesAccessPermission(userId, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PatchApiUserUserIdServicesAccessPermissionMutationResult =
  NonNullable<
    Awaited<ReturnType<typeof patchApiUserUserIdServicesAccessPermission>>
  >;
export type PatchApiUserUserIdServicesAccessPermissionMutationBody =
  PatchAccessUserPermissionsCommand;
export type PatchApiUserUserIdServicesAccessPermissionMutationError =
  ErrorResponse;

/**
 * @summary Patch access user permissions for user and specified services.
 */
export const usePatchApiUserUserIdServicesAccessPermission = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchApiUserUserIdServicesAccessPermission>>,
    TError,
    { userId: string; data: PatchAccessUserPermissionsCommand },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof patchApiUserUserIdServicesAccessPermission>>,
  TError,
  { userId: string; data: PatchAccessUserPermissionsCommand },
  TContext
> => {
  const mutationOptions =
    getPatchApiUserUserIdServicesAccessPermissionMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * @summary Patch access team permissions for team and specified services.
 */
export const patchApiTeamTeamIdServicesAccessPermission = (
  teamId: number,
  patchAccessTeamPermissionsCommand: PatchAccessTeamPermissionsCommand,
) => {
  return backendRequest<TeamPermissionsResponse>({
    url: `/api/team/${teamId}/services/access-permission`,
    method: 'PATCH',
    headers: { 'Content-Type': 'application/json' },
    data: patchAccessTeamPermissionsCommand,
  });
};

export const getPatchApiTeamTeamIdServicesAccessPermissionMutationOptions = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchApiTeamTeamIdServicesAccessPermission>>,
    TError,
    { teamId: number; data: PatchAccessTeamPermissionsCommand },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof patchApiTeamTeamIdServicesAccessPermission>>,
  TError,
  { teamId: number; data: PatchAccessTeamPermissionsCommand },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof patchApiTeamTeamIdServicesAccessPermission>>,
    { teamId: number; data: PatchAccessTeamPermissionsCommand }
  > = props => {
    const { teamId, data } = props ?? {};

    return patchApiTeamTeamIdServicesAccessPermission(teamId, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PatchApiTeamTeamIdServicesAccessPermissionMutationResult =
  NonNullable<
    Awaited<ReturnType<typeof patchApiTeamTeamIdServicesAccessPermission>>
  >;
export type PatchApiTeamTeamIdServicesAccessPermissionMutationBody =
  PatchAccessTeamPermissionsCommand;
export type PatchApiTeamTeamIdServicesAccessPermissionMutationError =
  ErrorResponse;

/**
 * @summary Patch access team permissions for team and specified services.
 */
export const usePatchApiTeamTeamIdServicesAccessPermission = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchApiTeamTeamIdServicesAccessPermission>>,
    TError,
    { teamId: number; data: PatchAccessTeamPermissionsCommand },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof patchApiTeamTeamIdServicesAccessPermission>>,
  TError,
  { teamId: number; data: PatchAccessTeamPermissionsCommand },
  TContext
> => {
  const mutationOptions =
    getPatchApiTeamTeamIdServicesAccessPermissionMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * @summary Return profile info by user id.
 */
export const getApiProfileId = (id: string, signal?: AbortSignal) => {
  return backendRequest<ProfileResponse>({
    url: `/api/profile/${id}`,
    method: 'GET',
    signal,
  });
};

export const getGetApiProfileIdQueryKey = (id: string) => {
  return [`/api/profile/${id}`] as const;
};

export const getGetApiProfileIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiProfileId>>,
  TError = ErrorResponse,
>(
  id: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiProfileId>>,
      TError,
      TData
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiProfileIdQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiProfileId>>> = ({
    signal,
  }) => getApiProfileId(id, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiProfileId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiProfileIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiProfileId>>
>;
export type GetApiProfileIdQueryError = ErrorResponse;

/**
 * @summary Return profile info by user id.
 */

export function useGetApiProfileId<
  TData = Awaited<ReturnType<typeof getApiProfileId>>,
  TError = ErrorResponse,
>(
  id: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiProfileId>>,
      TError,
      TData
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiProfileIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Return profile for the current user.
 */
export const getApiProfileMe = (signal?: AbortSignal) => {
  return backendRequest<MyProfileResponse | void>({
    url: '/api/profile/me',
    method: 'GET',
    signal,
  });
};

export const getGetApiProfileMeQueryKey = () => {
  return ['/api/profile/me'] as const;
};

export const getGetApiProfileMeQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiProfileMe>>,
  TError = ErrorResponse,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getApiProfileMe>>,
    TError,
    TData
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiProfileMeQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiProfileMe>>> = ({
    signal,
  }) => getApiProfileMe(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiProfileMe>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiProfileMeQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiProfileMe>>
>;
export type GetApiProfileMeQueryError = ErrorResponse;

/**
 * @summary Return profile for the current user.
 */

export function useGetApiProfileMe<
  TData = Awaited<ReturnType<typeof getApiProfileMe>>,
  TError = ErrorResponse,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getApiProfileMe>>,
    TError,
    TData
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiProfileMeQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Search users by email or first name and last name.
 */
export const getApiProfileSearch = (
  params?: GetApiProfileSearchParams,
  signal?: AbortSignal,
) => {
  return backendRequest<ProfileSearchResponse[]>({
    url: '/api/profile/search',
    method: 'GET',
    params,
    signal,
  });
};

export const getGetApiProfileSearchQueryKey = (
  params?: GetApiProfileSearchParams,
) => {
  return ['/api/profile/search', ...(params ? [params] : [])] as const;
};

export const getGetApiProfileSearchQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiProfileSearch>>,
  TError = ErrorResponse,
>(
  params?: GetApiProfileSearchParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiProfileSearch>>,
      TError,
      TData
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiProfileSearchQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiProfileSearch>>
  > = ({ signal }) => getApiProfileSearch(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiProfileSearch>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiProfileSearchQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiProfileSearch>>
>;
export type GetApiProfileSearchQueryError = ErrorResponse;

/**
 * @summary Search users by email or first name and last name.
 */

export function useGetApiProfileSearch<
  TData = Awaited<ReturnType<typeof getApiProfileSearch>>,
  TError = ErrorResponse,
>(
  params?: GetApiProfileSearchParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiProfileSearch>>,
      TError,
      TData
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiProfileSearchQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Use new api method /api/user/list with login via clientId and secret.
 * @deprecated
 * @summary Return paginated list of user profiles.
 */
export const getApiProfileList = (
  params?: GetApiProfileListParams,
  signal?: AbortSignal,
) => {
  return backendRequest<ProfileSearchResponsePaginationResponse>({
    url: '/api/profile/list',
    method: 'GET',
    params,
    signal,
  });
};

export const getGetApiProfileListQueryKey = (
  params?: GetApiProfileListParams,
) => {
  return ['/api/profile/list', ...(params ? [params] : [])] as const;
};

export const getGetApiProfileListQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiProfileList>>,
  TError = ErrorResponse,
>(
  params?: GetApiProfileListParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiProfileList>>,
      TError,
      TData
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiProfileListQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiProfileList>>
  > = ({ signal }) => getApiProfileList(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiProfileList>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiProfileListQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiProfileList>>
>;
export type GetApiProfileListQueryError = ErrorResponse;

/**
 * @deprecated
 * @summary Return paginated list of user profiles.
 */

export function useGetApiProfileList<
  TData = Awaited<ReturnType<typeof getApiProfileList>>,
  TError = ErrorResponse,
>(
  params?: GetApiProfileListParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiProfileList>>,
      TError,
      TData
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiProfileListQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Returns an avatar for the specified user profile id and image size.
 */
export const getApiProfileIdAvatar = (
  id: string,
  params?: GetApiProfileIdAvatarParams,
  signal?: AbortSignal,
) => {
  return backendRequest<void>({
    url: `/api/profile/${id}/avatar`,
    method: 'GET',
    params,
    signal,
  });
};

export const getGetApiProfileIdAvatarQueryKey = (
  id: string,
  params?: GetApiProfileIdAvatarParams,
) => {
  return [`/api/profile/${id}/avatar`, ...(params ? [params] : [])] as const;
};

export const getGetApiProfileIdAvatarQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiProfileIdAvatar>>,
  TError = ErrorResponse,
>(
  id: string,
  params?: GetApiProfileIdAvatarParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiProfileIdAvatar>>,
      TError,
      TData
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiProfileIdAvatarQueryKey(id, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiProfileIdAvatar>>
  > = ({ signal }) => getApiProfileIdAvatar(id, params, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiProfileIdAvatar>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiProfileIdAvatarQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiProfileIdAvatar>>
>;
export type GetApiProfileIdAvatarQueryError = ErrorResponse;

/**
 * @summary Returns an avatar for the specified user profile id and image size.
 */

export function useGetApiProfileIdAvatar<
  TData = Awaited<ReturnType<typeof getApiProfileIdAvatar>>,
  TError = ErrorResponse,
>(
  id: string,
  params?: GetApiProfileIdAvatarParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiProfileIdAvatar>>,
      TError,
      TData
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiProfileIdAvatarQueryOptions(
    id,
    params,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Returns an avatar for the specified user profile id and image size.
 */
export const getApiProfileIdAvatarUrl = (
  id: string,
  params?: GetApiProfileIdAvatarUrlParams,
  signal?: AbortSignal,
) => {
  return backendRequest<ProfileAvatarResponse>({
    url: `/api/profile/${id}/avatar/url`,
    method: 'GET',
    params,
    signal,
  });
};

export const getGetApiProfileIdAvatarUrlQueryKey = (
  id: string,
  params?: GetApiProfileIdAvatarUrlParams,
) => {
  return [
    `/api/profile/${id}/avatar/url`,
    ...(params ? [params] : []),
  ] as const;
};

export const getGetApiProfileIdAvatarUrlQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiProfileIdAvatarUrl>>,
  TError = ErrorResponse,
>(
  id: string,
  params?: GetApiProfileIdAvatarUrlParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiProfileIdAvatarUrl>>,
      TError,
      TData
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiProfileIdAvatarUrlQueryKey(id, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiProfileIdAvatarUrl>>
  > = ({ signal }) => getApiProfileIdAvatarUrl(id, params, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiProfileIdAvatarUrl>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiProfileIdAvatarUrlQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiProfileIdAvatarUrl>>
>;
export type GetApiProfileIdAvatarUrlQueryError = ErrorResponse;

/**
 * @summary Returns an avatar for the specified user profile id and image size.
 */

export function useGetApiProfileIdAvatarUrl<
  TData = Awaited<ReturnType<typeof getApiProfileIdAvatarUrl>>,
  TError = ErrorResponse,
>(
  id: string,
  params?: GetApiProfileIdAvatarUrlParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiProfileIdAvatarUrl>>,
      TError,
      TData
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiProfileIdAvatarUrlQueryOptions(
    id,
    params,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Returns an avatar for the specified email address and image size.
 */
export const getApiProfileEmailAvatar = (
  email: string,
  params?: GetApiProfileEmailAvatarParams,
  signal?: AbortSignal,
) => {
  return backendRequest<void>({
    url: `/api/profile/${email}/avatar`,
    method: 'GET',
    params,
    signal,
  });
};

export const getGetApiProfileEmailAvatarQueryKey = (
  email: string,
  params?: GetApiProfileEmailAvatarParams,
) => {
  return [`/api/profile/${email}/avatar`, ...(params ? [params] : [])] as const;
};

export const getGetApiProfileEmailAvatarQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiProfileEmailAvatar>>,
  TError = ErrorResponse,
>(
  email: string,
  params?: GetApiProfileEmailAvatarParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiProfileEmailAvatar>>,
      TError,
      TData
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetApiProfileEmailAvatarQueryKey(email, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiProfileEmailAvatar>>
  > = ({ signal }) => getApiProfileEmailAvatar(email, params, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!email,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiProfileEmailAvatar>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiProfileEmailAvatarQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiProfileEmailAvatar>>
>;
export type GetApiProfileEmailAvatarQueryError = ErrorResponse;

/**
 * @summary Returns an avatar for the specified email address and image size.
 */

export function useGetApiProfileEmailAvatar<
  TData = Awaited<ReturnType<typeof getApiProfileEmailAvatar>>,
  TError = ErrorResponse,
>(
  email: string,
  params?: GetApiProfileEmailAvatarParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiProfileEmailAvatar>>,
      TError,
      TData
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiProfileEmailAvatarQueryOptions(
    email,
    params,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Returns an avatar for the specified email address and image size.
 */
export const getApiProfileEmailAvatarUrl = (
  email: string,
  params?: GetApiProfileEmailAvatarUrlParams,
  signal?: AbortSignal,
) => {
  return backendRequest<ProfileAvatarResponse>({
    url: `/api/profile/${email}/avatar/url`,
    method: 'GET',
    params,
    signal,
  });
};

export const getGetApiProfileEmailAvatarUrlQueryKey = (
  email: string,
  params?: GetApiProfileEmailAvatarUrlParams,
) => {
  return [
    `/api/profile/${email}/avatar/url`,
    ...(params ? [params] : []),
  ] as const;
};

export const getGetApiProfileEmailAvatarUrlQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiProfileEmailAvatarUrl>>,
  TError = ErrorResponse,
>(
  email: string,
  params?: GetApiProfileEmailAvatarUrlParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiProfileEmailAvatarUrl>>,
      TError,
      TData
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetApiProfileEmailAvatarUrlQueryKey(email, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiProfileEmailAvatarUrl>>
  > = ({ signal }) => getApiProfileEmailAvatarUrl(email, params, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!email,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiProfileEmailAvatarUrl>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiProfileEmailAvatarUrlQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiProfileEmailAvatarUrl>>
>;
export type GetApiProfileEmailAvatarUrlQueryError = ErrorResponse;

/**
 * @summary Returns an avatar for the specified email address and image size.
 */

export function useGetApiProfileEmailAvatarUrl<
  TData = Awaited<ReturnType<typeof getApiProfileEmailAvatarUrl>>,
  TError = ErrorResponse,
>(
  email: string,
  params?: GetApiProfileEmailAvatarUrlParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiProfileEmailAvatarUrl>>,
      TError,
      TData
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiProfileEmailAvatarUrlQueryOptions(
    email,
    params,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Returns profile info by email.
 */
export const getApiProfile = (
  params?: GetApiProfileParams,
  signal?: AbortSignal,
) => {
  return backendRequest<EmployeeInfoWithBalanceResponse>({
    url: '/api/profile',
    method: 'GET',
    params,
    signal,
  });
};

export const getGetApiProfileQueryKey = (params?: GetApiProfileParams) => {
  return ['/api/profile', ...(params ? [params] : [])] as const;
};

export const getGetApiProfileQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiProfile>>,
  TError = ErrorResponse,
>(
  params?: GetApiProfileParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiProfile>>,
      TError,
      TData
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiProfileQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiProfile>>> = ({
    signal,
  }) => getApiProfile(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiProfile>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiProfileQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiProfile>>
>;
export type GetApiProfileQueryError = ErrorResponse;

/**
 * @summary Returns profile info by email.
 */

export function useGetApiProfile<
  TData = Awaited<ReturnType<typeof getApiProfile>>,
  TError = ErrorResponse,
>(
  params?: GetApiProfileParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiProfile>>,
      TError,
      TData
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiProfileQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get list of projects.
 */
export const getApiProjectList = (signal?: AbortSignal) => {
  return backendRequest<ProjectResponse[]>({
    url: '/api/project/list',
    method: 'GET',
    signal,
  });
};

export const getGetApiProjectListQueryKey = () => {
  return ['/api/project/list'] as const;
};

export const getGetApiProjectListQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiProjectList>>,
  TError = unknown,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getApiProjectList>>,
    TError,
    TData
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiProjectListQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiProjectList>>
  > = ({ signal }) => getApiProjectList(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiProjectList>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiProjectListQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiProjectList>>
>;
export type GetApiProjectListQueryError = unknown;

/**
 * @summary Get list of projects.
 */

export function useGetApiProjectList<
  TData = Awaited<ReturnType<typeof getApiProjectList>>,
  TError = unknown,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getApiProjectList>>,
    TError,
    TData
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiProjectListQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Pick up promo code for specified user.
 */
export const postApiPromocodesPickup = (
  pickUpPromoCodeCommand: PickUpPromoCodeCommand,
) => {
  return backendRequest<PickUpPromoCodeResponse>({
    url: '/api/promocodes/pickup',
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: pickUpPromoCodeCommand,
  });
};

export const getPostApiPromocodesPickupMutationOptions = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiPromocodesPickup>>,
    TError,
    { data: PickUpPromoCodeCommand },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiPromocodesPickup>>,
  TError,
  { data: PickUpPromoCodeCommand },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiPromocodesPickup>>,
    { data: PickUpPromoCodeCommand }
  > = props => {
    const { data } = props ?? {};

    return postApiPromocodesPickup(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiPromocodesPickupMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiPromocodesPickup>>
>;
export type PostApiPromocodesPickupMutationBody = PickUpPromoCodeCommand;
export type PostApiPromocodesPickupMutationError = ErrorResponse;

/**
 * @summary Pick up promo code for specified user.
 */
export const usePostApiPromocodesPickup = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiPromocodesPickup>>,
    TError,
    { data: PickUpPromoCodeCommand },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiPromocodesPickup>>,
  TError,
  { data: PickUpPromoCodeCommand },
  TContext
> => {
  const mutationOptions = getPostApiPromocodesPickupMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * @summary Creates service.
 */
export const postApiServices = (createServiceCommand: CreateServiceCommand) => {
  return backendRequest<ServiceResponse>({
    url: '/api/services',
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: createServiceCommand,
  });
};

export const getPostApiServicesMutationOptions = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiServices>>,
    TError,
    { data: CreateServiceCommand },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiServices>>,
  TError,
  { data: CreateServiceCommand },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiServices>>,
    { data: CreateServiceCommand }
  > = props => {
    const { data } = props ?? {};

    return postApiServices(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiServicesMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiServices>>
>;
export type PostApiServicesMutationBody = CreateServiceCommand;
export type PostApiServicesMutationError = ErrorResponse;

/**
 * @summary Creates service.
 */
export const usePostApiServices = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiServices>>,
    TError,
    { data: CreateServiceCommand },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiServices>>,
  TError,
  { data: CreateServiceCommand },
  TContext
> => {
  const mutationOptions = getPostApiServicesMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * @summary Deletes services with its permissions, user permissions and team permissions.
 */
export const deleteApiServices = (
  deleteServicesCommand: DeleteServicesCommand,
) => {
  return backendRequest<void>({
    url: '/api/services',
    method: 'DELETE',
    headers: { 'Content-Type': 'application/json' },
    data: deleteServicesCommand,
  });
};

export const getDeleteApiServicesMutationOptions = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiServices>>,
    TError,
    { data: DeleteServicesCommand },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiServices>>,
  TError,
  { data: DeleteServicesCommand },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiServices>>,
    { data: DeleteServicesCommand }
  > = props => {
    const { data } = props ?? {};

    return deleteApiServices(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiServicesMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiServices>>
>;
export type DeleteApiServicesMutationBody = DeleteServicesCommand;
export type DeleteApiServicesMutationError = ErrorResponse;

/**
 * @summary Deletes services with its permissions, user permissions and team permissions.
 */
export const useDeleteApiServices = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiServices>>,
    TError,
    { data: DeleteServicesCommand },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteApiServices>>,
  TError,
  { data: DeleteServicesCommand },
  TContext
> => {
  const mutationOptions = getDeleteApiServicesMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * @summary Get list of services.
 */
export const getApiServices = (signal?: AbortSignal) => {
  return backendRequest<ServiceResponse[]>({
    url: '/api/services',
    method: 'GET',
    signal,
  });
};

export const getGetApiServicesQueryKey = () => {
  return ['/api/services'] as const;
};

export const getGetApiServicesQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiServices>>,
  TError = ErrorResponse,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getApiServices>>,
    TError,
    TData
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiServicesQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiServices>>> = ({
    signal,
  }) => getApiServices(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiServices>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiServicesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiServices>>
>;
export type GetApiServicesQueryError = ErrorResponse;

/**
 * @summary Get list of services.
 */

export function useGetApiServices<
  TData = Awaited<ReturnType<typeof getApiServices>>,
  TError = ErrorResponse,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getApiServices>>,
    TError,
    TData
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiServicesQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Deletes service with its permissions, user permissions and team permissions.
 */
export const deleteApiServicesId = (id: number) => {
  return backendRequest<ServiceResponse>({
    url: `/api/services/${id}`,
    method: 'DELETE',
  });
};

export const getDeleteApiServicesIdMutationOptions = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiServicesId>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiServicesId>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiServicesId>>,
    { id: number }
  > = props => {
    const { id } = props ?? {};

    return deleteApiServicesId(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiServicesIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiServicesId>>
>;

export type DeleteApiServicesIdMutationError = ErrorResponse;

/**
 * @summary Deletes service with its permissions, user permissions and team permissions.
 */
export const useDeleteApiServicesId = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiServicesId>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteApiServicesId>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getDeleteApiServicesIdMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * @summary Gets the list of teams.
 */
export const getApiTeams = (signal?: AbortSignal) => {
  return backendRequest<TeamResponse[]>({
    url: '/api/teams',
    method: 'GET',
    signal,
  });
};

export const getGetApiTeamsQueryKey = () => {
  return ['/api/teams'] as const;
};

export const getGetApiTeamsQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiTeams>>,
  TError = ErrorResponse,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getApiTeams>>,
    TError,
    TData
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiTeamsQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiTeams>>> = ({
    signal,
  }) => getApiTeams(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiTeams>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiTeamsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiTeams>>
>;
export type GetApiTeamsQueryError = ErrorResponse;

/**
 * @summary Gets the list of teams.
 */

export function useGetApiTeams<
  TData = Awaited<ReturnType<typeof getApiTeams>>,
  TError = ErrorResponse,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getApiTeams>>,
    TError,
    TData
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiTeamsQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Transaction type:
Debit = 1,
Credit = 2,
Transfer = 3
 * @summary Returns list of transactions for the current user.
 */
export const getApiTransactionsMy = (
  params?: GetApiTransactionsMyParams,
  signal?: AbortSignal,
) => {
  return backendRequest<TransactionResponsePaginationResponse>({
    url: '/api/transactions/my',
    method: 'GET',
    params,
    signal,
  });
};

export const getGetApiTransactionsMyQueryKey = (
  params?: GetApiTransactionsMyParams,
) => {
  return ['/api/transactions/my', ...(params ? [params] : [])] as const;
};

export const getGetApiTransactionsMyQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiTransactionsMy>>,
  TError = ErrorResponse,
>(
  params?: GetApiTransactionsMyParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiTransactionsMy>>,
      TError,
      TData
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiTransactionsMyQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiTransactionsMy>>
  > = ({ signal }) => getApiTransactionsMy(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiTransactionsMy>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiTransactionsMyQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiTransactionsMy>>
>;
export type GetApiTransactionsMyQueryError = ErrorResponse;

/**
 * @summary Returns list of transactions for the current user.
 */

export function useGetApiTransactionsMy<
  TData = Awaited<ReturnType<typeof getApiTransactionsMy>>,
  TError = ErrorResponse,
>(
  params?: GetApiTransactionsMyParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiTransactionsMy>>,
      TError,
      TData
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiTransactionsMyQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Transaction type:
Debit = 1,
Credit = 2,
Transfer = 3
 * @summary Return list of transactions for the specified user.
 */
export const getApiTransactions = (
  params?: GetApiTransactionsParams,
  signal?: AbortSignal,
) => {
  return backendRequest<TransactionResponsePaginationResponse>({
    url: '/api/transactions',
    method: 'GET',
    params,
    signal,
  });
};

export const getGetApiTransactionsQueryKey = (
  params?: GetApiTransactionsParams,
) => {
  return ['/api/transactions', ...(params ? [params] : [])] as const;
};

export const getGetApiTransactionsQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiTransactions>>,
  TError = ErrorResponse,
>(
  params?: GetApiTransactionsParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiTransactions>>,
      TError,
      TData
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiTransactionsQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiTransactions>>
  > = ({ signal }) => getApiTransactions(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiTransactions>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiTransactionsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiTransactions>>
>;
export type GetApiTransactionsQueryError = ErrorResponse;

/**
 * @summary Return list of transactions for the specified user.
 */

export function useGetApiTransactions<
  TData = Awaited<ReturnType<typeof getApiTransactions>>,
  TError = ErrorResponse,
>(
  params?: GetApiTransactionsParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiTransactions>>,
      TError,
      TData
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiTransactionsQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Returns list of vacancies.
 */
export const getApiVacancies = (
  params?: GetApiVacanciesParams,
  signal?: AbortSignal,
) => {
  return backendRequest<VacancyItemResponse[]>({
    url: '/api/vacancies',
    method: 'GET',
    params,
    signal,
  });
};

export const getGetApiVacanciesQueryKey = (params?: GetApiVacanciesParams) => {
  return ['/api/vacancies', ...(params ? [params] : [])] as const;
};

export const getGetApiVacanciesQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiVacancies>>,
  TError = unknown,
>(
  params?: GetApiVacanciesParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiVacancies>>,
      TError,
      TData
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiVacanciesQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiVacancies>>> = ({
    signal,
  }) => getApiVacancies(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiVacancies>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiVacanciesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiVacancies>>
>;
export type GetApiVacanciesQueryError = unknown;

/**
 * @summary Returns list of vacancies.
 */

export function useGetApiVacancies<
  TData = Awaited<ReturnType<typeof getApiVacancies>>,
  TError = unknown,
>(
  params?: GetApiVacanciesParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiVacancies>>,
      TError,
      TData
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiVacanciesQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Returns list of hot vacancies.
 */
export const getApiVacanciesHot = (
  params?: GetApiVacanciesHotParams,
  signal?: AbortSignal,
) => {
  return backendRequest<VacancyItemResponse[]>({
    url: '/api/vacancies/hot',
    method: 'GET',
    params,
    signal,
  });
};

export const getGetApiVacanciesHotQueryKey = (
  params?: GetApiVacanciesHotParams,
) => {
  return ['/api/vacancies/hot', ...(params ? [params] : [])] as const;
};

export const getGetApiVacanciesHotQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiVacanciesHot>>,
  TError = unknown,
>(
  params?: GetApiVacanciesHotParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiVacanciesHot>>,
      TError,
      TData
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiVacanciesHotQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiVacanciesHot>>
  > = ({ signal }) => getApiVacanciesHot(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiVacanciesHot>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiVacanciesHotQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiVacanciesHot>>
>;
export type GetApiVacanciesHotQueryError = unknown;

/**
 * @summary Returns list of hot vacancies.
 */

export function useGetApiVacanciesHot<
  TData = Awaited<ReturnType<typeof getApiVacanciesHot>>,
  TError = unknown,
>(
  params?: GetApiVacanciesHotParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiVacanciesHot>>,
      TError,
      TData
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiVacanciesHotQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Returns detailed info of vacancy by Id.
 */
export const getApiVacanciesId = (id: string, signal?: AbortSignal) => {
  return backendRequest<VacancyResponse>({
    url: `/api/vacancies/${id}`,
    method: 'GET',
    signal,
  });
};

export const getGetApiVacanciesIdQueryKey = (id: string) => {
  return [`/api/vacancies/${id}`] as const;
};

export const getGetApiVacanciesIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiVacanciesId>>,
  TError = ErrorResponse,
>(
  id: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiVacanciesId>>,
      TError,
      TData
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiVacanciesIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiVacanciesId>>
  > = ({ signal }) => getApiVacanciesId(id, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiVacanciesId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiVacanciesIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiVacanciesId>>
>;
export type GetApiVacanciesIdQueryError = ErrorResponse;

/**
 * @summary Returns detailed info of vacancy by Id.
 */

export function useGetApiVacanciesId<
  TData = Awaited<ReturnType<typeof getApiVacanciesId>>,
  TError = ErrorResponse,
>(
  id: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiVacanciesId>>,
      TError,
      TData
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiVacanciesIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Returns current version of API.
 */
export const getApiVersion = (signal?: AbortSignal) => {
  return backendRequest<string>({ url: '/api/version', method: 'GET', signal });
};

export const getGetApiVersionQueryKey = () => {
  return ['/api/version'] as const;
};

export const getGetApiVersionQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiVersion>>,
  TError = unknown,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getApiVersion>>,
    TError,
    TData
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiVersionQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiVersion>>> = ({
    signal,
  }) => getApiVersion(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiVersion>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiVersionQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiVersion>>
>;
export type GetApiVersionQueryError = unknown;

/**
 * @summary Returns current version of API.
 */

export function useGetApiVersion<
  TData = Awaited<ReturnType<typeof getApiVersion>>,
  TError = unknown,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getApiVersion>>,
    TError,
    TData
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiVersionQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}
